@IsTest
private class QueryBuilderTest {
    @IsTest
    static void canSelectFromAnObject_systemDb() {
        // Given an account in the DB
        QDB.useSystemDB();
        Account account = new Account(Name = 'Test Account');
        QDB.getInstance().doInsert(account);

        // By default when you don't specify any fields, it is going to select the Id
        QueryBuilder builder = QueryBuilder.of('Account');

        // When I run the query
        List<Account> accounts = QDB.getInstance().query(builder);

        Assert.areEqual(1, accounts.size());
        Assert.areEqual(account.Id, accounts[0].Id);
    }

    @IsTest
    static void canSelectFromAnObject_inMemory() {
        Account account = new Account(Name = 'Test Account');
        QDB.getInstance().doInsert(account);

        // By default when you don't specify any fields, it is going to select the Id
        QueryBuilder builder = QueryBuilder.of('Account');

        // When I run the query
        List<Account> accounts = QDB.getInstance().query(builder);

        System.debug(accounts);

        Assert.areEqual(1, accounts.size());
        Assert.areEqual(account.Id, accounts[0].Id);
    }

    @IsTest
    static void canSelectFromAnyObject_systemDb() {
        QDB.useSystemDB();
        Contact someContact = new Contact(LastName = 'Test Contact');
        QDB.getInstance().doInsert(someContact);

        QueryBuilder builder = QueryBuilder.of('Contact');

        List<Contact> contacts = QDB.getInstance().query(builder);

        Assert.areEqual(1, contacts.size());
        Assert.areEqual(someContact.Id, contacts[0].Id);
    }

    @IsTest
    static void canSelectFromAnyObject_inMemoryDb() {
        Contact someContact = new Contact(LastName = 'Test Contact');
        Account someAccount = new Account(Name = 'Test Account');
        QDB.getInstance().doInsert(
            new List<SObject>{
                someContact,
                someAccount
            }
        );

        QueryBuilder builder = QueryBuilder.of('Contact');

        List<Contact> contacts = QDB.getInstance().query(builder);

        Assert.areEqual(1, contacts.size());
    }

    @IsTest
    static void idsAreAutoGeneratedWhenInsertingSomethingIntoTheInMemoryDB() {
        Contact someContact = new Contact(LastName = 'Test Contact');
        QDB.getInstance().doInsert(someContact);

        QueryBuilder builder = QueryBuilder.of('Contact');

        List<Contact> contacts = QDB.getInstance().query(builder);

        Assert.isNotNull(contacts[0].Id);
    }

    @IsTest
    static void canSelectSpecificFieldsFromAnObject_systemDb() {
        QDB.useSystemDB();
        Account account = new Account(Name = 'Test Account');
        QDB.getInstance().doInsert(account);

        QueryBuilder builder = QueryBuilder.of('Account').selectFields(new Set<String>{'Name'});

        List<Account> accounts = QDB.getInstance().query(builder);

        Assert.areEqual(1, accounts.size());
        Assert.areEqual(account.Id, accounts[0].Id);
        Assert.areEqual(account.Name, accounts[0].Name);
    }

    @IsTest
    static void canSelectSpecificFieldsFromAnObject_whenANullSetOfFieldsIsPassed_noExceptionsAreThrown() {
        QDB.useSystemDB();
        Account account = new Account(Name = 'Test Account');
        QDB.getInstance().doInsert(account);

        QueryBuilder builder = QueryBuilder.of('Account').selectFields(null);

        try {
            QDB.getInstance().query(builder);
            Assert.isTrue(true);
        } catch (Exception e) {
            Assert.fail('An exception was thrown');
        }
    }

    @IsTest
    static void canSelectSpecificFieldsFromAnObject_inMemoryDb() {
        Account account = new Account(Name = 'Test Account');
        QDB.getInstance().doInsert(account);

        QueryBuilder builder = QueryBuilder.of('Account');

        List<Account> accounts = QDB.getInstance().query(builder);
        System.debug(accounts);

        Assert.areEqual(1, accounts.size());
        Assert.areEqual(account.Id, accounts[0].Id);
        Assert.isNull(accounts[0].Name);
    }

    @IsTest
    static void canSelectSpecificFieldsFromAnObject_canInsertWithNonWritableFieldsIntoTheDatabase() {
        Account account = (Account) SObjectBuilder.of(Account.SObjectType)
            .put('Name', 'Test Account')
            .put('CreatedDate', Datetime.now())
            .build();
        QDB.getInstance().doInsert(account);

        QueryBuilder builder = QueryBuilder.of('Account').selectFields(new Set<String>{'Name', 'CreatedDate'});

        List<Account> accounts = QDB.getInstance().query(builder);

        Assert.areEqual(1, accounts.size());
        Assert.areEqual(account.Id, accounts[0].Id);
        Assert.areEqual(account.Name, accounts[0].Name);
    }

    @IsTest
    static void canSelectOneFieldAtATime() {
        Account account = (Account) SObjectBuilder.of(Account.SObjectType)
            .put('Name', 'Test Account')
            .put('CreatedDate', Datetime.now())
            .build();
        QDB.getInstance().doInsert(account);

        QueryBuilder builder = QueryBuilder.of('Account')
            .selectField('Name')
            .selectField('CreatedDate');

        List<Account> accounts = QDB.getInstance().query(builder);

        Assert.areEqual(1, accounts.size());
        Assert.areEqual(account.Id, accounts[0].Id);
        Assert.areEqual(account.Name, accounts[0].Name);
    }

    @IsTest
    static void canSelectUsingLimit_salesforceDatabase() {
        QDB.useSystemDB();
        QDB.getInstance().doInsert(
            new List<SObject>{
                new Account(Name = 'Test Account 1'),
                new Account(Name = 'Test Account 2')
            }
        );

        QueryBuilder builder = QueryBuilder.of('Account')
            .selectFields(new Set<String>{'Name'})
            .withLimitAmount(1);

        List<Account> accounts = QDB.getInstance().query(builder);

        Assert.areEqual(1, accounts.size());
    }

    @IsTest
    static void canSelectUsingLimit_inMemoryDb() {
        QDB.getInstance().doInsert(
            new List<SObject>{
                new Account(Name = 'Test Account 1'),
                new Account(Name = 'Test Account 2')
            }
        );

        QueryBuilder builder = QueryBuilder.of('Account')
            .selectFields(new Set<String>{'Name'})
            .withLimitAmount(1);

        List<Account> accounts = QDB.getInstance().query(builder);

        Assert.areEqual(1, accounts.size());
    }

    @IsTest
    static void canSelectUsingOffset_salesforceDatabase() {
        QDB.useSystemDB();
        QDB.getInstance().doInsert(
            new List<SObject>{
                new Account(Name = 'Test Account 1'),
                new Account(Name = 'Test Account 2')
            }
        );

        QueryBuilder builder = QueryBuilder.of('Account')
            .selectFields(new Set<String>{'Name'})
            .withOffsetAmount(1);

        List<Account> accounts = QDB.getInstance().query(builder);

        Assert.areEqual(1, accounts.size());
    }

    @IsTest
    static void canSelectUsingOffset_inMemory() {
        QDB.getInstance().doInsert(
            new List<SObject>{
                new Account(Name = 'Test Account 1'),
                new Account(Name = 'Test Account 2')
            }
        );

        QueryBuilder builder = QueryBuilder.of('Account')
            .selectFields(new Set<String>{'Name'})
            .withOffsetAmount(1);

        List<Account> accounts = QDB.getInstance().query(builder);

        Assert.areEqual(1, accounts.size());
    }

    // TODO: Can query specific fields out of an object
    // TODO: Can query parent fields
    // TODO: Can subquery
    // TODO: Where clause
    // TODO: Order by

    // TODO: Be able to specify an "of" that is an SobjectType and not a string
    // TODO: When the "of" overload using a string gets used, there should be validation to ensure that a correct SObjecttype is used

    // FOR WAY LATER
    // Update, Upsert, Delete, Unledete, Merge
}
